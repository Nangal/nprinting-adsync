/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using NUnit.Framework;
using Qlik.NPrinting.Rest.Client.Api;
using Qlik.NPrinting.Rest.Client.Model;

namespace Qlik.NPrinting.Rest.Client.Test.Api
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    class GroupsApiTests : BaseNPrintingClinetTest
    {
        private GroupsApi _instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _instance = new GroupsApi(NprintingApiClient);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<GroupsApi>(_instance, "response is GroupsApi");
        }

        
        /// <summary>
        /// Test GroupsGet
        /// </summary>
        [Test(Description = "Get the list of all groups.")]
        public void GroupsGetAllTest()
        {
            var response = _instance.GroupsGet();
            Assert.IsInstanceOf<GroupResponse> (response, "response is GroupResponse");
        }


        /// <summary>
        /// Test GroupsGet
        /// </summary>
        [Test(Description = "Get the list of groups filter by name.")]
        public void GroupsGetByNameTest()
        {
            var groupName = "Developers";
            var response = _instance.GroupsGet(groupName);
            Assert.IsInstanceOf<GroupResponse>(response, "response is GroupResponse");
            Assert.That(response.Data.Items.Count, Is.GreaterThan(0));
            Assert.That(response.Data.Items[0].Name, Is.EqualTo(groupName));
        }


        /// <summary>
        /// Test GroupsIdGet
        /// </summary>
        [Test]
        public void GroupsIdGetTest()
        {
            var groupList = _instance.GroupsGet();
            string id = groupList.Data.Items[0].Id.ToString();
            var response = _instance.GroupsIdGet(id);
            Assert.IsInstanceOf<GroupResponseEntry> (response, "response is GroupResponse");
            Assert.That(response.Data.Id.ToString(), Is.EqualTo(id));
        }
        
        /// <summary>
        /// Test GroupsIdPut
        /// </summary>
        [Test]
        public void GroupsIdPutTest()
        {
            const string newDescr = "Update Group Description";
            var groupList = _instance.GroupsGet();
            string id = groupList.Data.Items[0].Id.ToString();
            _instance.GroupsIdPut(id, new GroupUpdateRequest(groupList.Data.Items[0].Name,newDescr,true));
            var updatedGroup = _instance.GroupsIdGet(id);
            Assert.That(updatedGroup.Data.Description, Is.EqualTo(newDescr));
        }
        
        /// <summary>
        /// Test GroupsIdUsersGet
        /// </summary>
        [Test]
        public void GroupsIdUsersGetTest()
        {
            var id = _instance.GroupsGet("Presidents").Data.Items[0].Id.ToString();
            var response = _instance.GroupsIdUsersGet(id);
            Assert.IsInstanceOf<GenericIdListDataResponse> (response, "response is GenericIdListDataResponse");
            Assert.That(response.Data.Items.Count, Is.GreaterThan(0));
        }
        
        /// <summary>
        /// Test GroupsPost
        /// </summary>
        [Test]
        public void GroupsPostTest()
        {
            const string newGroupName = "Test New Group";
            const string newGroupDescr = "Test Description";
            _instance.GroupsPost(new GroupRequest(newGroupName, newGroupDescr, true));
            GroupResponse response = _instance.GroupsGet(newGroupName);
            Assert.That(response.Data.Items[0].Name , Is.EqualTo(newGroupName));
            Assert.That(response.Data.Items[0].Description, Is.EqualTo(newGroupDescr));
        }
        
    }

}
