/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Qlik.NPrinting.Rest.Client.Api;
using Qlik.NPrinting.Rest.Client.Model;

namespace Qlik.NPrinting.Rest.Client.Test.Api
{
    
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    class UsersApiTests : BaseNPrintingClinetTest
    {
        private UsersApi _instance;
        private RolesApi _roleApiInstance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _instance = new UsersApi(NprintingApiClient);
            _roleApiInstance = new RolesApi(NprintingApiClient);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<UsersApi>(_instance, "response is UsersApi");
        }

        
        /// <summary>
        /// Test UsersGet
        /// </summary>
        [Test]
        public void UsersGetByNameTest()
        {
            const string userName = "Demo";
            var response = _instance.UsersGet(null, "Demo");
            Assert.IsInstanceOf<UserListResponse> (response, "response is UserListResponse");
            Assert.That(response.Data.Items[0].Username, Is.EqualTo(userName));
        }
        
        /// <summary>
        /// Test UsersIdFiltersGet
        /// </summary>
        [Test]
        public void UsersIdFiltersGetTest()
        {
            var user = _instance.UsersGet(null, "Barack Obama");
            var userId = user.Data.Items[0].Id.ToString();
            var response = _instance.UsersIdFiltersGet(userId);
            Assert.IsInstanceOf<GenericIdListDataResponse> (response, "response is GenericIdListDataResponse");
            Assert.That(response.Data.Items.Count, Is.GreaterThan(0));
        }
        
        /// <summary>
        /// Test UsersIdGet
        /// </summary>
        [Test]
        public void UsersIdGetTest()
        {
            var user = _instance.UsersGet(null, "Barack Obama");
            var userId = user.Data.Items[0].Id.ToString();
            var response = _instance.UsersIdGet(userId);
            Assert.IsInstanceOf<UserResponseEntry> (response, "response is UserListResponse");
            Assert.That(response.Data.Id.ToString(), Is.EqualTo(userId));
        }
        
        /// <summary>
        /// Test UsersIdGroupsGet
        /// </summary>
        [Test]
        public void UsersIdGroupsGetTest()
        {
            var user = _instance.UsersGet(null, "Barack Obama");
            var userId = user.Data.Items[0].Id.ToString();
            var response = _instance.UsersIdGroupsGet(userId);
            Assert.IsInstanceOf<GenericIdListDataResponse> (response, "response is GenericIdListDataResponse");
            Assert.That(response.Data.Items.Count, Is.GreaterThan(0));
        }
        
        
        
        /// <summary>
        /// Test UsersIdRolesGet
        /// </summary>
        [Test]
        public void UsersIdRolesGetTest()
        {
            var user = _instance.UsersGet(null, "Barack Obama");
            var userId = user.Data.Items[0].Id.ToString();
            var response = _instance.UsersIdRolesGet(userId);
            Assert.IsInstanceOf<GenericIdListDataResponse> (response, "response is GenericIdListDataResponse");
            Assert.That(response.Data.Items.Count, Is.GreaterThan(0));
        }
        
        /// <summary>
        /// Test UsersIdRolesPut
        /// </summary>
        [Test]
        public void UsersIdRolesPutTest()
        {
            var user = _instance.UsersGet(null, "Barack Obama");
            var response = _instance.UsersIdRolesGet(user.Data.Items[0].Id.ToString());
            var roleAdmin = _roleApiInstance.RolesGet("Administrator");
            List<Guid> userRoleIdList = response.Data.Items.Select(Guid.Parse).ToList();
            userRoleIdList.Add(roleAdmin.Data.Items[0].Id);

            _instance.UsersIdRolesPut(user.Data.Items[0].Id.ToString(), userRoleIdList);

        }
        
        /// <summary>
        /// Test UsersPost
        /// </summary>
        [Test]
        public void UsersPostTest()
        {
            UserRequest userRequest = new UserRequest("testuser@test.com", "123", true, "TestUser", null,
                "Europe/Berlin", UserLocale.En);
            _instance.UsersPost(userRequest);
            var userResponse = _instance.UsersGet("testuser@test.com");
            var user = userResponse.Data.Items[0];
            Assert.That(user.Id, Is.Not.Null);
            Assert.That(user.Username, Is.EqualTo("TestUser"));
            Assert.That(user.Email, Is.EqualTo("testuser@test.com"));
            Assert.That(user.Enabled, Is.EqualTo(true));
            Assert.That(user.Created, Is.Not.Null);
            Assert.That(user.LastUpdate, Is.Not.Null);
        }
    }
}
