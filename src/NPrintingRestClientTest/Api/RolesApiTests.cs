/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;
using Qlik.NPrinting.Rest.Client.Api;
using Qlik.NPrinting.Rest.Client.Model;

namespace Qlik.NPrinting.Rest.Client.Test.Api
{
    /// <summary>
    ///  Class for testing RolesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    class RolesApiTests : BaseNPrintingClinetTest
    {
        private RolesApi _instance;
        private UsersApi _userApiInstance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _instance = new RolesApi(NprintingApiClient);
            _userApiInstance = new UsersApi(NprintingApiClient);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RolesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
           Assert.IsInstanceOf<RolesApi>(_instance, "response is RolesApi");
        }

        /// <summary>
        /// Test RolesGet
        /// </summary>
        [Test]
        public void RolesGetAllTest()
        {
            var response = _instance.RolesGet();
            Assert.IsInstanceOf<RoleListResponse> (response, "response is RoleListResponse");
        }
        
        /// <summary>
        /// Test RolesIdGet
        /// </summary>
        [Test]
        public void RolesIdGetTest()
        {
            var developerRole = _instance.RolesGet("Developer");
            var roleId = developerRole.Data.Items[0].Id.ToString();
            var response = _instance.RolesIdGet(roleId);
            Assert.IsInstanceOf<RoleResponseData> (response, "response is RoleResponseData");
            Assert.That(response.Data.Id.ToString(), Is.EqualTo(roleId));
        }
        
        /// <summary>
        /// Test UsersIdRolesGet
        /// </summary>
        [Test]
        public void UsersIdRolesGetTest()
        {
            var user = _userApiInstance.UsersGet(null,"Barack Obama");
            var userId = user.Data.Items[0].Id.ToString();
            var response = _instance.UsersIdRolesGet(userId);
            Assert.IsInstanceOf<GenericIdListDataResponse> (response, "response is GenericIdListDataResponse");
            Assert.That(response.Data.Items.Count, Is.GreaterThan(0));
        }   
    }
}
