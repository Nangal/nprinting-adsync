/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Qlik.NPrinting.Rest.Client.Model
{
    /// <summary>
    /// RoleResponseDataItem
    /// </summary>
    [DataContract]
    public partial class RoleResponseDataItem :  IEquatable<RoleResponseDataItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleResponseDataItem" /> class.
        /// </summary>
        /// <param name="Id">The unique identifier of the role..</param>
        /// <param name="Name">The name of the role..</param>
        /// <param name="Description">The description of the role..</param>
        /// <param name="Enabled">Indicates whether this role is enabled (true) or disabled..</param>
        /// <param name="HasAllActions">Indicates whether this role contains all possible actions..</param>
        /// <param name="HasAllApps">Indicates whether this role is related to all apps..</param>
        /// <param name="IsSystemRole">Indicates whether this role is a system role..</param>
        public RoleResponseDataItem(Guid Id = default(Guid), string Name = default(string), string Description = default(string), bool? Enabled = default(bool?), bool? HasAllActions = default(bool?), bool? HasAllApps = default(bool?), bool? IsSystemRole = default(bool?))
        {
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.Enabled = Enabled;
            this.HasAllActions = HasAllActions;
            this.HasAllApps = HasAllApps;
            this.IsSystemRole = IsSystemRole;
        }
        
        /// <summary>
        /// The unique identifier of the role.
        /// </summary>
        /// <value>The unique identifier of the role.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }
        /// <summary>
        /// The name of the role.
        /// </summary>
        /// <value>The name of the role.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The description of the role.
        /// </summary>
        /// <value>The description of the role.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Indicates whether this role is enabled (true) or disabled.
        /// </summary>
        /// <value>Indicates whether this role is enabled (true) or disabled.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Indicates whether this role contains all possible actions.
        /// </summary>
        /// <value>Indicates whether this role contains all possible actions.</value>
        [DataMember(Name="hasAllActions", EmitDefaultValue=false)]
        public bool? HasAllActions { get; set; }
        /// <summary>
        /// Indicates whether this role is related to all apps.
        /// </summary>
        /// <value>Indicates whether this role is related to all apps.</value>
        [DataMember(Name="hasAllApps", EmitDefaultValue=false)]
        public bool? HasAllApps { get; set; }
        /// <summary>
        /// Indicates whether this role is a system role.
        /// </summary>
        /// <value>Indicates whether this role is a system role.</value>
        [DataMember(Name="isSystemRole", EmitDefaultValue=false)]
        public bool? IsSystemRole { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoleResponseDataItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  HasAllActions: ").Append(HasAllActions).Append("\n");
            sb.Append("  HasAllApps: ").Append(HasAllApps).Append("\n");
            sb.Append("  IsSystemRole: ").Append(IsSystemRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RoleResponseDataItem);
        }

        /// <summary>
        /// Returns true if RoleResponseDataItem instances are equal
        /// </summary>
        /// <param name="other">Instance of RoleResponseDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleResponseDataItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.HasAllActions == other.HasAllActions ||
                    this.HasAllActions != null &&
                    this.HasAllActions.Equals(other.HasAllActions)
                ) && 
                (
                    this.HasAllApps == other.HasAllApps ||
                    this.HasAllApps != null &&
                    this.HasAllApps.Equals(other.HasAllApps)
                ) && 
                (
                    this.IsSystemRole == other.IsSystemRole ||
                    this.IsSystemRole != null &&
                    this.IsSystemRole.Equals(other.IsSystemRole)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.HasAllActions != null)
                    hash = hash * 59 + this.HasAllActions.GetHashCode();
                if (this.HasAllApps != null)
                    hash = hash * 59 + this.HasAllApps.GetHashCode();
                if (this.IsSystemRole != null)
                    hash = hash * 59 + this.IsSystemRole.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
