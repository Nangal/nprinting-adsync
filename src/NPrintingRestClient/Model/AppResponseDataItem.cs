/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Qlik.NPrinting.Rest.Client.Model
{
    /// <summary>
    /// AppResponseDataItem
    /// </summary>
    [DataContract]
    public partial class AppResponseDataItem :  IEquatable<AppResponseDataItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppResponseDataItem" /> class.
        /// </summary>
        /// <param name="Id">The unique identifier of the app..</param>
        /// <param name="Created">The creation date in RFC 3339 format..</param>
        /// <param name="Name">The name of the NPrinting app..</param>
        /// <param name="Description">The description of the app..</param>
        public AppResponseDataItem(Guid Id = default(Guid), DateTime? Created = default(DateTime?), string Name = default(string), string Description = default(string))
        {
            this.Id = Id;
            this.Created = Created;
            this.Name = Name;
            this.Description = Description;
        }
        
        /// <summary>
        /// The unique identifier of the app.
        /// </summary>
        /// <value>The unique identifier of the app.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }
        /// <summary>
        /// The creation date in RFC 3339 format.
        /// </summary>
        /// <value>The creation date in RFC 3339 format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// The name of the NPrinting app.
        /// </summary>
        /// <value>The name of the NPrinting app.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The description of the app.
        /// </summary>
        /// <value>The description of the app.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppResponseDataItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AppResponseDataItem);
        }

        /// <summary>
        /// Returns true if AppResponseDataItem instances are equal
        /// </summary>
        /// <param name="other">Instance of AppResponseDataItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppResponseDataItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
