/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using Qlik.NPrinting.Rest.Client.Client;
using Qlik.NPrinting.Rest.Client.Model;
using RestSharp;

namespace Qlik.NPrinting.Rest.Client.Api
{
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFiltersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the list of filters.
        /// </summary>
        /// <remarks>
        /// Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>FilterListResponse</returns>
        FilterListResponse FiltersGet (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the list of filters.
        /// </summary>
        /// <remarks>
        /// Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of FilterListResponse</returns>
        ApiResponse<FilterListResponse> FiltersGetWithHttpInfo (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Deletes a filter.
        /// </summary>
        /// <remarks>
        /// Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns></returns>
        void FiltersIdDelete (string id);

        /// <summary>
        /// Deletes a filter.
        /// </summary>
        /// <remarks>
        /// Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FiltersIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Gets details of the specified filter.
        /// </summary>
        /// <remarks>
        /// Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>FilterResponse</returns>
        FilterResponse FiltersIdGet (string id);

        /// <summary>
        /// Gets details of the specified filter.
        /// </summary>
        /// <remarks>
        /// Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>ApiResponse of FilterResponse</returns>
        ApiResponse<FilterResponse> FiltersIdGetWithHttpInfo (string id);
        /// <summary>
        /// Updates an existing filter.
        /// </summary>
        /// <remarks>
        /// Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns></returns>
        void FiltersIdPut (string id, FilterRequest body);

        /// <summary>
        /// Updates an existing filter.
        /// </summary>
        /// <remarks>
        /// Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FiltersIdPutWithHttpInfo (string id, FilterRequest body);
        /// <summary>
        /// Creates a new filter.
        /// </summary>
        /// <remarks>
        /// Creates a new filter, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns></returns>
        void FiltersPost (FilterRequest filterRequest);

        /// <summary>
        /// Creates a new filter.
        /// </summary>
        /// <remarks>
        /// Creates a new filter, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FiltersPostWithHttpInfo (FilterRequest filterRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the list of filters.
        /// </summary>
        /// <remarks>
        /// Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of FilterListResponse</returns>
        System.Threading.Tasks.Task<FilterListResponse> FiltersGetAsync (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the list of filters.
        /// </summary>
        /// <remarks>
        /// Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (FilterListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterListResponse>> FiltersGetAsyncWithHttpInfo (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Deletes a filter.
        /// </summary>
        /// <remarks>
        /// Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FiltersIdDeleteAsync (string id);

        /// <summary>
        /// Deletes a filter.
        /// </summary>
        /// <remarks>
        /// Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FiltersIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets details of the specified filter.
        /// </summary>
        /// <remarks>
        /// Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Task of FilterResponse</returns>
        System.Threading.Tasks.Task<FilterResponse> FiltersIdGetAsync (string id);

        /// <summary>
        /// Gets details of the specified filter.
        /// </summary>
        /// <remarks>
        /// Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Task of ApiResponse (FilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilterResponse>> FiltersIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates an existing filter.
        /// </summary>
        /// <remarks>
        /// Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FiltersIdPutAsync (string id, FilterRequest body);

        /// <summary>
        /// Updates an existing filter.
        /// </summary>
        /// <remarks>
        /// Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FiltersIdPutAsyncWithHttpInfo (string id, FilterRequest body);
        /// <summary>
        /// Creates a new filter.
        /// </summary>
        /// <remarks>
        /// Creates a new filter, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FiltersPostAsync (FilterRequest filterRequest);

        /// <summary>
        /// Creates a new filter.
        /// </summary>
        /// <remarks>
        /// Creates a new filter, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FiltersPostAsyncWithHttpInfo (FilterRequest filterRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FiltersApi : IFiltersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FiltersApi(ApiClient apiClient)
        {
            ApiClient = apiClient;

            ExceptionFactory = ApiClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the list of filters. Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>FilterListResponse</returns>
        public FilterListResponse FiltersGet (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<FilterListResponse> localVarResponse = FiltersGetWithHttpInfo(appId, enabled, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of filters. Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of FilterListResponse</returns>
        public ApiResponse< FilterListResponse > FiltersGetWithHttpInfo (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = ApiClient.ApiPathPrefix + "/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appId != null) localVarQueryParams.Add("appId",  this.ApiClient.ParameterToString(appId)); // query parameter
            if (enabled != null) localVarQueryParams.Add("enabled",  this.ApiClient.ParameterToString(enabled)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort",  this.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset",  this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit",  this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)  this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilterListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilterListResponse)  this.ApiClient.Deserialize(localVarResponse, typeof(FilterListResponse)));
            
        }

        /// <summary>
        /// Gets the list of filters. Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of FilterListResponse</returns>
        public async System.Threading.Tasks.Task<FilterListResponse> FiltersGetAsync (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<FilterListResponse> localVarResponse = await FiltersGetAsyncWithHttpInfo(appId, enabled, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of filters. Returns the list of filters that are visible to the user.  The response includes the title and other details about each filter. The list can be filtered by a particular app, and is sorted in the order specified by the &#x60;sort&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the app to filter on. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active filters (true) or inactive filters (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields used for sorting the filters. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /filters?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (FilterListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilterListResponse>> FiltersGetAsyncWithHttpInfo (string appId = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = ApiClient.ApiPathPrefix + "/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appId != null) localVarQueryParams.Add("appId",  this.ApiClient.ParameterToString(appId)); // query parameter
            if (enabled != null) localVarQueryParams.Add("enabled",  this.ApiClient.ParameterToString(enabled)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort",  this.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset",  this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit",  this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await  this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilterListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilterListResponse)  this.ApiClient.Deserialize(localVarResponse, typeof(FilterListResponse)));
            
        }

        /// <summary>
        /// Deletes a filter. Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns></returns>
        public void FiltersIdDelete (string id)
        {
             FiltersIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes a filter. Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FiltersIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->FiltersIdDelete");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id",  this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)  this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a filter. Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FiltersIdDeleteAsync (string id)
        {
             await FiltersIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes a filter. Deletes the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FiltersIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->FiltersIdDelete");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id",  this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await  this.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets details of the specified filter. Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>FilterResponse</returns>
        public FilterResponse FiltersIdGet (string id)
        {
             ApiResponse<FilterResponse> localVarResponse = FiltersIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of the specified filter. Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>ApiResponse of FilterResponse</returns>
        public ApiResponse< FilterResponse > FiltersIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->FiltersIdGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id",  this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)  this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilterResponse)  this.ApiClient.Deserialize(localVarResponse, typeof(FilterResponse)));
            
        }

        /// <summary>
        /// Gets details of the specified filter. Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Task of FilterResponse</returns>
        public async System.Threading.Tasks.Task<FilterResponse> FiltersIdGetAsync (string id)
        {
             ApiResponse<FilterResponse> localVarResponse = await FiltersIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets details of the specified filter. Returns the details of the filter specified by the &#x60;id&#x60; parameter.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Task of ApiResponse (FilterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilterResponse>> FiltersIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->FiltersIdGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id",  this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await  this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilterResponse)  this.ApiClient.Deserialize(localVarResponse, typeof(FilterResponse)));
            
        }

        /// <summary>
        /// Updates an existing filter. Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns></returns>
        public void FiltersIdPut (string id, FilterRequest body)
        {
             FiltersIdPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Updates an existing filter. Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FiltersIdPutWithHttpInfo (string id, FilterRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->FiltersIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FiltersApi->FiltersIdPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id",  this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody =  this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)  this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an existing filter. Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FiltersIdPutAsync (string id, FilterRequest body)
        {
             await FiltersIdPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Updates an existing filter. Updates the filter specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the filter to update.</param>
        /// <param name="body">The filter details to update.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FiltersIdPutAsyncWithHttpInfo (string id, FilterRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->FiltersIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FiltersApi->FiltersIdPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id",  this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody =  this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await  this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new filter. Creates a new filter, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns></returns>
        public void FiltersPost (FilterRequest filterRequest)
        {
             FiltersPostWithHttpInfo(filterRequest);
        }

        /// <summary>
        /// Creates a new filter. Creates a new filter, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FiltersPostWithHttpInfo (FilterRequest filterRequest)
        {
            // verify the required parameter 'filterRequest' is set
            if (filterRequest == null)
                throw new ApiException(400, "Missing required parameter 'filterRequest' when calling FiltersApi->FiltersPost");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterRequest != null && filterRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =  this.ApiClient.Serialize(filterRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filterRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)  this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new filter. Creates a new filter, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FiltersPostAsync (FilterRequest filterRequest)
        {
             await FiltersPostAsyncWithHttpInfo(filterRequest);

        }

        /// <summary>
        /// Creates a new filter. Creates a new filter, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterRequest">the filter request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FiltersPostAsyncWithHttpInfo (FilterRequest filterRequest)
        {
            // verify the required parameter 'filterRequest' is set
            if (filterRequest == null)
                throw new ApiException(400, "Missing required parameter 'filterRequest' when calling FiltersApi->FiltersPost");

            var localVarPath = ApiClient.ApiPathPrefix + "/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>( this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType =  this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept =  this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterRequest != null && filterRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =  this.ApiClient.Serialize(filterRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = filterRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await  this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FiltersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
