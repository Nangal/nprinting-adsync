/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using Qlik.NPrinting.Rest.Client.Client;
using Qlik.NPrinting.Rest.Client.Model;
using RestSharp;

namespace Qlik.NPrinting.Rest.Client.Api
{
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the user list.
        /// </summary>
        /// <remarks>
        /// Returns the list of users. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>UserListResponse</returns>
        UserListResponse UsersGet (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the user list.
        /// </summary>
        /// <remarks>
        /// Returns the list of users. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of UserListResponse</returns>
        ApiResponse<UserListResponse> UsersGetWithHttpInfo (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns></returns>
        void UsersIdDelete (string id);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Gets the filters for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        GenericIdListDataResponse UsersIdFiltersGet (string id);

        /// <summary>
        /// Gets the filters for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<GenericIdListDataResponse> UsersIdFiltersGetWithHttpInfo (string id);
        /// <summary>
        /// Update the filters for a user.
        /// </summary>
        /// <remarks>
        /// Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns></returns>
        void UsersIdFiltersPut (string id, List<Guid> body);

        /// <summary>
        /// Update the filters for a user.
        /// </summary>
        /// <remarks>
        /// Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersIdFiltersPutWithHttpInfo (string id, List<Guid> body);
        /// <summary>
        /// Gets a specified user.
        /// </summary>
        /// <remarks>
        /// Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>InlineResponse20013</returns>
        UserResponseEntry UsersIdGet (string id);

        /// <summary>
        /// Gets a specified user.
        /// </summary>
        /// <remarks>
        /// Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<UserResponseEntry> UsersIdGetWithHttpInfo (string id);
        /// <summary>
        /// Gets a list of groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        GenericIdListDataResponse UsersIdGroupsGet (string id, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<GenericIdListDataResponse> UsersIdGroupsGetWithHttpInfo (string id, int? offset = null, int? limit = null);
        /// <summary>
        /// Updates a user&#39;s list of groups.
        /// </summary>
        /// <remarks>
        /// Updates the unordered list of group IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns></returns>
        void UsersIdGroupsPut (string id, List<Guid> body);

        /// <summary>
        /// Updates a user&#39;s list of groups.
        /// </summary>
        /// <remarks>
        /// Updates the unordered list of group IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersIdGroupsPutWithHttpInfo (string id, List<Guid> body);
        /// <summary>
        /// Update an existing user.
        /// </summary>
        /// <remarks>
        /// Update the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns></returns>
        void UsersIdPut (string id, UserUpdateRequest body);

        /// <summary>
        /// Update an existing user.
        /// </summary>
        /// <remarks>
        /// Update the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersIdPutWithHttpInfo (string id, UserUpdateRequest body);
        /// <summary>
        /// Gets the roles for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        GenericIdListDataResponse UsersIdRolesGet (string id);

        /// <summary>
        /// Gets the roles for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<GenericIdListDataResponse> UsersIdRolesGetWithHttpInfo (string id);
        /// <summary>
        /// Updates the roles for a user.
        /// </summary>
        /// <remarks>
        /// Updates the list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns></returns>
        void UsersIdRolesPut (string id, List<Guid> body);

        /// <summary>
        /// Updates the roles for a user.
        /// </summary>
        /// <remarks>
        /// Updates the list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersIdRolesPutWithHttpInfo (string id, List<Guid> body);
        /// <summary>
        /// Adds a user.
        /// </summary>
        /// <remarks>
        /// Adds a new user, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns></returns>
        void UsersPost (UserRequest userRequest);

        /// <summary>
        /// Adds a user.
        /// </summary>
        /// <remarks>
        /// Adds a new user, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersPostWithHttpInfo (UserRequest userRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the user list.
        /// </summary>
        /// <remarks>
        /// Returns the list of users. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of UserListResponse</returns>
        System.Threading.Tasks.Task<UserListResponse> UsersGetAsync (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the user list.
        /// </summary>
        /// <remarks>
        /// Returns the list of users. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (UserListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserListResponse>> UsersGetAsyncWithHttpInfo (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersIdDeleteAsync (string id);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the filters for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<GenericIdListDataResponse> UsersIdFiltersGetAsync (string id);

        /// <summary>
        /// Gets the filters for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> UsersIdFiltersGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update the filters for a user.
        /// </summary>
        /// <remarks>
        /// Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersIdFiltersPutAsync (string id, List<Guid> body);

        /// <summary>
        /// Update the filters for a user.
        /// </summary>
        /// <remarks>
        /// Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdFiltersPutAsyncWithHttpInfo (string id, List<Guid> body);
        /// <summary>
        /// Gets a specified user.
        /// </summary>
        /// <remarks>
        /// Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<UserResponseEntry> UsersIdGetAsync (string id);

        /// <summary>
        /// Gets a specified user.
        /// </summary>
        /// <remarks>
        /// Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponseEntry>> UsersIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a list of groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<GenericIdListDataResponse> UsersIdGroupsGetAsync (string id, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets a list of groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> UsersIdGroupsGetAsyncWithHttpInfo (string id, int? offset = null, int? limit = null);
        /// <summary>
        /// Updates a user&#39;s list of groups.
        /// </summary>
        /// <remarks>
        /// Updates the unordered list of group IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersIdGroupsPutAsync (string id, List<Guid> body);

        /// <summary>
        /// Updates a user&#39;s list of groups.
        /// </summary>
        /// <remarks>
        /// Updates the unordered list of group IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdGroupsPutAsyncWithHttpInfo (string id, List<Guid> body);
        /// <summary>
        /// Update an existing user.
        /// </summary>
        /// <remarks>
        /// Update the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersIdPutAsync (string id, UserUpdateRequest body);

        /// <summary>
        /// Update an existing user.
        /// </summary>
        /// <remarks>
        /// Update the user specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdPutAsyncWithHttpInfo (string id, UserUpdateRequest body);
        /// <summary>
        /// Gets the roles for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<GenericIdListDataResponse> UsersIdRolesGetAsync (string id);

        /// <summary>
        /// Gets the roles for a user.
        /// </summary>
        /// <remarks>
        /// Returns the ordered list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> UsersIdRolesGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates the roles for a user.
        /// </summary>
        /// <remarks>
        /// Updates the list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersIdRolesPutAsync (string id, List<Guid> body);

        /// <summary>
        /// Updates the roles for a user.
        /// </summary>
        /// <remarks>
        /// Updates the list of role IDs for the specified user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdRolesPutAsyncWithHttpInfo (string id, List<Guid> body);
        /// <summary>
        /// Adds a user.
        /// </summary>
        /// <remarks>
        /// Adds a new user, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersPostAsync (UserRequest userRequest);

        /// <summary>
        /// Adds a user.
        /// </summary>
        /// <remarks>
        /// Adds a new user, and returns its ID. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersPostAsyncWithHttpInfo (UserRequest userRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(ApiClient apiClient)
        {
            ApiClient = apiClient;

            ExceptionFactory = ApiClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the user list. Returns the list of users. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>UserListResponse</returns>
        public UserListResponse UsersGet (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<UserListResponse> localVarResponse = UsersGetWithHttpInfo(email, username, enabled, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user list. Returns the list of users. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of UserListResponse</returns>
        public ApiResponse< UserListResponse > UsersGetWithHttpInfo (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = ApiClient.ApiPathPrefix + "/users";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(email)); // query parameter
            if (username != null) localVarQueryParams.Add("username", this.ApiClient.ParameterToString(username)); // query parameter
            if (enabled != null) localVarQueryParams.Add("enabled", this.ApiClient.ParameterToString(enabled)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(UserListResponse)));
            
        }

        /// <summary>
        /// Gets the user list. Returns the list of users. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of UserListResponse</returns>
        public async System.Threading.Tasks.Task<UserListResponse> UsersGetAsync (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<UserListResponse> localVarResponse = await UsersGetAsyncWithHttpInfo(email, username, enabled, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user list. Returns the list of users. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email of the user to be used as a filter. (optional)</param>
        /// <param name="username">The username to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active users (true) or inactive users (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to be used for sorting the users. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.     Usage example: /users?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (UserListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserListResponse>> UsersGetAsyncWithHttpInfo (string email = null, string username = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = ApiClient.ApiPathPrefix + "/users";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(email)); // query parameter
            if (username != null) localVarQueryParams.Add("username", this.ApiClient.ParameterToString(username)); // query parameter
            if (enabled != null) localVarQueryParams.Add("enabled", this.ApiClient.ParameterToString(enabled)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserListResponse) this.ApiClient.Deserialize(localVarResponse, typeof(UserListResponse)));
            
        }

        /// <summary>
        /// Delete a user. Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns></returns>
        public void UsersIdDelete (string id)
        {
             UsersIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a user. Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdDelete");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersIdDeleteAsync (string id)
        {
             await UsersIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a user. Delete the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdDelete");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the filters for a user. Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public GenericIdListDataResponse UsersIdFiltersGet (string id)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = UsersIdFiltersGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the filters for a user. Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public ApiResponse<GenericIdListDataResponse> UsersIdFiltersGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdFiltersGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Gets the filters for a user. Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<GenericIdListDataResponse> UsersIdFiltersGetAsync (string id)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = await UsersIdFiltersGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the filters for a user. Returns the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> UsersIdFiltersGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdFiltersGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Update the filters for a user. Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns></returns>
        public void UsersIdFiltersPut (string id, List<Guid> body)
        {
             UsersIdFiltersPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Update the filters for a user. Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersIdFiltersPutWithHttpInfo (string id, List<Guid> body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdFiltersPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdFiltersPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdFiltersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the filters for a user. Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersIdFiltersPutAsync (string id, List<Guid> body)
        {
             await UsersIdFiltersPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Update the filters for a user. Updates the ordered list of filter IDs for the specified user. Note that the filter sequence, in general, is not commutative, so the order will affect the result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user</param>
        /// <param name="body">The ordered list of the filters for the specified user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdFiltersPutAsyncWithHttpInfo (string id, List<Guid> body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdFiltersPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdFiltersPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/filters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdFiltersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a specified user. Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>InlineResponse20013</returns>
        public UserResponseEntry UsersIdGet (string id)
        {
             ApiResponse<UserResponseEntry> localVarResponse = UsersIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a specified user. Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<UserResponseEntry> UsersIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseEntry) this.ApiClient.Deserialize(localVarResponse, typeof(UserResponseEntry)));
            
        }

        /// <summary>
        /// Gets a specified user. Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<UserResponseEntry> UsersIdGetAsync (string id)
        {
             ApiResponse<UserResponseEntry> localVarResponse = await UsersIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a specified user. Returns the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponseEntry>> UsersIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseEntry) this.ApiClient.Deserialize(localVarResponse, typeof(UserResponseEntry)));
            
        }

        /// <summary>
        /// Gets a list of groups. Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public GenericIdListDataResponse UsersIdGroupsGet (string id, int? offset = null, int? limit = null)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = UsersIdGroupsGetWithHttpInfo(id, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of groups. Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public ApiResponse<GenericIdListDataResponse> UsersIdGroupsGetWithHttpInfo (string id, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGroupsGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Gets a list of groups. Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<GenericIdListDataResponse> UsersIdGroupsGetAsync (string id, int? offset = null, int? limit = null)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = await UsersIdGroupsGetAsyncWithHttpInfo(id, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of groups. Returns the list of groups for the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to return groups for.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> UsersIdGroupsGetAsyncWithHttpInfo (string id, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGroupsGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Updates a user&#39;s list of groups. Updates the unordered list of group IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns></returns>
        public void UsersIdGroupsPut (string id, List<Guid> body)
        {
             UsersIdGroupsPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Updates a user&#39;s list of groups. Updates the unordered list of group IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersIdGroupsPutWithHttpInfo (string id, List<Guid> body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGroupsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdGroupsPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdGroupsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a user&#39;s list of groups. Updates the unordered list of group IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersIdGroupsPutAsync (string id, List<Guid> body)
        {
             await UsersIdGroupsPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Updates a user&#39;s list of groups. Updates the unordered list of group IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of groups for the specified user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdGroupsPutAsyncWithHttpInfo (string id, List<Guid> body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGroupsPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdGroupsPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdGroupsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an existing user. Update the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns></returns>
        public void UsersIdPut (string id, UserUpdateRequest body)
        {
             UsersIdPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Update an existing user. Update the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersIdPutWithHttpInfo (string id, UserUpdateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an existing user. Update the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersIdPutAsync (string id, UserUpdateRequest body)
        {
             await UsersIdPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Update an existing user. Update the user specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user object to update.</param>
        /// <param name="body">The user details to update.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdPutAsyncWithHttpInfo (string id, UserUpdateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the roles for a user. Returns the ordered list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public GenericIdListDataResponse UsersIdRolesGet (string id)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = UsersIdRolesGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the roles for a user. Returns the ordered list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public ApiResponse<GenericIdListDataResponse> UsersIdRolesGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdRolesGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/roles";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Gets the roles for a user. Returns the ordered list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<GenericIdListDataResponse> UsersIdRolesGetAsync (string id)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = await UsersIdRolesGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the roles for a user. Returns the ordered list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> UsersIdRolesGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdRolesGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/roles";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Updates the roles for a user. Updates the list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns></returns>
        public void UsersIdRolesPut (string id, List<Guid> body)
        {
             UsersIdRolesPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Updates the roles for a user. Updates the list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersIdRolesPutWithHttpInfo (string id, List<Guid> body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdRolesPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdRolesPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/roles";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdRolesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the roles for a user. Updates the list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersIdRolesPutAsync (string id, List<Guid> body)
        {
             await UsersIdRolesPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Updates the roles for a user. Updates the list of role IDs for the specified user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user.</param>
        /// <param name="body">The unordered list of roles for the specified user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdRolesPutAsyncWithHttpInfo (string id, List<Guid> body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdRolesPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdRolesPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/users/{id}/roles";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersIdRolesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a user. Adds a new user, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns></returns>
        public void UsersPost (UserRequest userRequest)
        {
             UsersPostWithHttpInfo(userRequest);
        }

        /// <summary>
        /// Adds a user. Adds a new user, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersPostWithHttpInfo (UserRequest userRequest)
        {
            // verify the required parameter 'userRequest' is set
            if (userRequest == null)
                throw new ApiException(400, "Missing required parameter 'userRequest' when calling UsersApi->UsersPost");

            var localVarPath = ApiClient.ApiPathPrefix + "/users";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userRequest != null && userRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a user. Adds a new user, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersPostAsync (UserRequest userRequest)
        {
             await UsersPostAsyncWithHttpInfo(userRequest);

        }

        /// <summary>
        /// Adds a user. Adds a new user, and returns its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRequest">The details about the user to add.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersPostAsyncWithHttpInfo (UserRequest userRequest)
        {
            // verify the required parameter 'userRequest' is set
            if (userRequest == null)
                throw new ApiException(400, "Missing required parameter 'userRequest' when calling UsersApi->UsersPost");

            var localVarPath = ApiClient.ApiPathPrefix + "/users";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userRequest != null && userRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
