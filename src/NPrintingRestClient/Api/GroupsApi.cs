/* 
 * Qlik NPrinting API
 *
 * You can extend your reporting system by using the Qlik NPrinting API. This API provides endpoints to perform operations on apps, On-Demand requests and results, reports, filters, and so on.  For all requests, the data returned is filtered based on user permissions. That is, if a user is not authorized to access a certain object, that object is not returned in the reponse.  API Stability: Experimental.  Deprecation period: None. Can change at any point and should be used only to evaluate upcoming functionality.     
 *
 * OpenAPI spec version: 0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using Qlik.NPrinting.Rest.Client.Client;
using Qlik.NPrinting.Rest.Client.Model;
using RestSharp;

namespace Qlik.NPrinting.Rest.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>GroupResponse</returns>
        GroupResponse GroupsGet (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of GroupResponse</returns>
        ApiResponse<GroupResponse> GroupsGetWithHttpInfo (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Deletes a group.
        /// </summary>
        /// <remarks>
        /// Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns></returns>
        void GroupsIdDelete (string id);

        /// <summary>
        /// Deletes a group.
        /// </summary>
        /// <remarks>
        /// Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GroupsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Get a specific group.
        /// </summary>
        /// <remarks>
        /// Returns the group specified by the ID parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>GroupResponseData1</returns>
        GroupResponseEntry GroupsIdGet (string id);

        /// <summary>
        /// Get a specific group.
        /// </summary>
        /// <remarks>
        /// Returns the group specified by the ID parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>ApiResponse of GroupResponseData1</returns>
        ApiResponse<GroupResponseEntry> GroupsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Updates a group.
        /// </summary>
        /// <remarks>
        /// Update the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns></returns>
        void GroupsIdPut (string id, GroupUpdateRequest body);

        /// <summary>
        /// Updates a group.
        /// </summary>
        /// <remarks>
        /// Update the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GroupsIdPutWithHttpInfo (string id, GroupUpdateRequest body);
        /// <summary>
        /// Gets the users in a group.
        /// </summary>
        /// <remarks>
        /// Returns the list of users for the specified group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        GenericIdListDataResponse GroupsIdUsersGet (string id, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the users in a group.
        /// </summary>
        /// <remarks>
        /// Returns the list of users for the specified group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<GenericIdListDataResponse> GroupsIdUsersGetWithHttpInfo (string id, int? offset = null, int? limit = null);
        /// <summary>
        /// Adds a new group.
        /// </summary>
        /// <remarks>
        /// Adds a new group, and returns the group object created. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns></returns>
        void GroupsPost (GroupRequest request);

        /// <summary>
        /// Adds a new group.
        /// </summary>
        /// <remarks>
        /// Adds a new group, and returns the group object created. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GroupsPostWithHttpInfo (GroupRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of GroupResponse</returns>
        System.Threading.Tasks.Task<GroupResponse> GroupsGetAsync (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the groups.
        /// </summary>
        /// <remarks>
        /// Returns the list of groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (GroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupResponse>> GroupsGetAsyncWithHttpInfo (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Deletes a group.
        /// </summary>
        /// <remarks>
        /// Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GroupsIdDeleteAsync (string id);

        /// <summary>
        /// Deletes a group.
        /// </summary>
        /// <remarks>
        /// Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GroupsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a specific group.
        /// </summary>
        /// <remarks>
        /// Returns the group specified by the ID parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>Task of GroupResponseData1</returns>
        System.Threading.Tasks.Task<GroupResponseEntry> GroupsIdGetAsync (string id);

        /// <summary>
        /// Get a specific group.
        /// </summary>
        /// <remarks>
        /// Returns the group specified by the ID parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>Task of ApiResponse (GroupResponseData1)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupResponseEntry>> GroupsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates a group.
        /// </summary>
        /// <remarks>
        /// Update the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GroupsIdPutAsync (string id, GroupUpdateRequest body);

        /// <summary>
        /// Updates a group.
        /// </summary>
        /// <remarks>
        /// Update the group specified by the &#x60;id&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GroupsIdPutAsyncWithHttpInfo (string id, GroupUpdateRequest body);
        /// <summary>
        /// Gets the users in a group.
        /// </summary>
        /// <remarks>
        /// Returns the list of users for the specified group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<GenericIdListDataResponse> GroupsIdUsersGetAsync (string id, int? offset = null, int? limit = null);

        /// <summary>
        /// Gets the users in a group.
        /// </summary>
        /// <remarks>
        /// Returns the list of users for the specified group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> GroupsIdUsersGetAsyncWithHttpInfo (string id, int? offset = null, int? limit = null);
        /// <summary>
        /// Adds a new group.
        /// </summary>
        /// <remarks>
        /// Adds a new group, and returns the group object created. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GroupsPostAsync (GroupRequest request);

        /// <summary>
        /// Adds a new group.
        /// </summary>
        /// <remarks>
        /// Adds a new group, and returns the group object created. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GroupsPostAsyncWithHttpInfo (GroupRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;
        
        public GroupsApi(ApiClient apiClient)
        {
            ApiClient = apiClient;

            ExceptionFactory = ApiClient.DefaultExceptionFactory;
        }


        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.ApiClient.RestClient.BaseUrl.ToString();
        }



        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the groups. Returns the list of groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>GroupResponse</returns>
        public GroupResponse GroupsGet (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GroupResponse> localVarResponse = GroupsGetWithHttpInfo(groupname, enabled, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the groups. Returns the list of groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of GroupResponse</returns>
        public ApiResponse< GroupResponse > GroupsGetWithHttpInfo (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = ApiClient.ApiPathPrefix + "/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupname != null) localVarQueryParams.Add("groupname", this.ApiClient.ParameterToString(groupname)); // query parameter
            if (enabled != null) localVarQueryParams.Add("enabled", this.ApiClient.ParameterToString(enabled)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GroupResponse)));
            
        }

        /// <summary>
        /// Gets the groups. Returns the list of groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of GroupResponse</returns>
        public async System.Threading.Tasks.Task<GroupResponse> GroupsGetAsync (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GroupResponse> localVarResponse = await GroupsGetAsyncWithHttpInfo(groupname, enabled, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the groups. Returns the list of groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">The group name to use as a filter. (optional)</param>
        /// <param name="enabled">Indicates whether to retrieve the active groups (true) or inactive groups (false). (optional)</param>
        /// <param name="sort">A comma separated list of fields to use for sorting the entries. Allowed field values are \&quot;name\&quot; and \&quot;created\&quot;. Fields can be prefixed by \&quot;+\&quot; and \&quot;-\&quot; to indicate, respectively, ascending and descending order.  Usage example: /groups?sort&#x3D;+name,-created  (optional)</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (GroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupResponse>> GroupsGetAsyncWithHttpInfo (string groupname = null, bool? enabled = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = ApiClient.ApiPathPrefix + "/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupname != null) localVarQueryParams.Add("groupname", this.ApiClient.ParameterToString(groupname)); // query parameter
            if (enabled != null) localVarQueryParams.Add("enabled", this.ApiClient.ParameterToString(enabled)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GroupResponse)));
            
        }

        /// <summary>
        /// Deletes a group. Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns></returns>
        public void GroupsIdDelete (string id)
        {
             GroupsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes a group. Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GroupsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdDelete");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a group. Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GroupsIdDeleteAsync (string id)
        {
             await GroupsIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes a group. Deletes the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GroupsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdDelete");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a specific group. Returns the group specified by the ID parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>GroupResponseData1</returns>
        public GroupResponseEntry GroupsIdGet (string id)
        {
             ApiResponse<GroupResponseEntry> localVarResponse = GroupsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific group. Returns the group specified by the ID parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>ApiResponse of GroupResponseData1</returns>
        public ApiResponse<GroupResponseEntry> GroupsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupResponseEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupResponseEntry) this.ApiClient.Deserialize(localVarResponse, typeof(GroupResponseEntry)));
            
        }

        /// <summary>
        /// Get a specific group. Returns the group specified by the ID parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>Task of GroupResponseData1</returns>
        public async System.Threading.Tasks.Task<GroupResponseEntry> GroupsIdGetAsync (string id)
        {
             ApiResponse<GroupResponseEntry> localVarResponse = await GroupsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific group. Returns the group specified by the ID parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <returns>Task of ApiResponse (GroupResponseData1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupResponseEntry>> GroupsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupResponseEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupResponseEntry) this.ApiClient.Deserialize(localVarResponse, typeof(GroupResponseEntry)));
            
        }

        /// <summary>
        /// Updates a group. Update the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns></returns>
        public void GroupsIdPut (string id, GroupUpdateRequest body)
        {
             GroupsIdPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Updates a group. Update the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GroupsIdPutWithHttpInfo (string id, GroupUpdateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling GroupsApi->GroupsIdPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a group. Update the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GroupsIdPutAsync (string id, GroupUpdateRequest body)
        {
             await GroupsIdPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Updates a group. Update the group specified by the &#x60;id&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group to be updated.</param>
        /// <param name="body">The group details to update.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GroupsIdPutAsyncWithHttpInfo (string id, GroupUpdateRequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling GroupsApi->GroupsIdPut");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the users in a group. Returns the list of users for the specified group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public GenericIdListDataResponse GroupsIdUsersGet (string id, int? offset = null, int? limit = null)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = GroupsIdUsersGetWithHttpInfo(id, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the users in a group. Returns the list of users for the specified group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public ApiResponse<GenericIdListDataResponse> GroupsIdUsersGetWithHttpInfo (string id, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdUsersGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}/users";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Gets the users in a group. Returns the list of users for the specified group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<GenericIdListDataResponse> GroupsIdUsersGetAsync (string id, int? offset = null, int? limit = null)
        {
             ApiResponse<GenericIdListDataResponse> localVarResponse = await GroupsIdUsersGetAsyncWithHttpInfo(id, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the users in a group. Returns the list of users for the specified group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the group.</param>
        /// <param name="offset">The number of entries to skip. Default is 0. (optional, default to 0)</param>
        /// <param name="limit">The maximum number of entries to return. Default is 50. (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericIdListDataResponse>> GroupsIdUsersGetAsyncWithHttpInfo (string id, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupsApi->GroupsIdUsersGet");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups/{id}/users";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", this.ApiClient.ParameterToString(id)); // path parameter
            if (offset != null) localVarQueryParams.Add("offset", this.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", this.ApiClient.ParameterToString(limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericIdListDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericIdListDataResponse) this.ApiClient.Deserialize(localVarResponse, typeof(GenericIdListDataResponse)));
            
        }

        /// <summary>
        /// Adds a new group. Adds a new group, and returns the group object created. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns></returns>
        public void GroupsPost (GroupRequest request)
        {
             GroupsPostWithHttpInfo(request);
        }

        /// <summary>
        /// Adds a new group. Adds a new group, and returns the group object created. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GroupsPostWithHttpInfo (GroupRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GroupsApi->GroupsPost");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a new group. Adds a new group, and returns the group object created. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GroupsPostAsync (GroupRequest request)
        {
             await GroupsPostAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// Adds a new group. Adds a new group, and returns the group object created. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details about the group to create.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GroupsPostAsyncWithHttpInfo (GroupRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling GroupsApi->GroupsPost");

            var localVarPath = ApiClient.ApiPathPrefix + "/groups";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(this.ApiClient.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
